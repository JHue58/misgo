syntax = "proto3";

package money;

option go_package = "money";

import "api.proto";



message Transaction {
  string Type = 1[(api.body)="type"];
  string Category = 2 [(api.body)="category"];
  float Amount = 3[(api.body)="amount"];
  string Note = 4[(api.body)="note"];
  int64 Time = 5[(api.body)="time"];
  int64 ID = 6[(api.body)="id"];
}

message TransactionView {
  // 总共
  int64 Count = 1 ;
  // 收入Count
  int64 IncomeCount = 2;
  // 支出Count
  int64 ExpenditureCount = 3;
  // 总收入
  float Income = 4;
  // 总支出
  float Expenditure = 5;
  // 最大收入
  Transaction LargestIncome = 6;
  // 最大支出
  Transaction LargestExpenditure = 7;
}

message TransactionReq {
  string UID = 1[(api.body)="uid"];
  Transaction OneTransaction = 2[(api.body)="transaction"];
}
message TransactionContentReq {
  string UID = 1[(api.body)="uid"];
  string Content = 2[(api.body)="content"];
}
message TransactionPersonalView{
  // 总共记账
  int64 Count = 1 ;
  // 总共收入Count
  int64 IncomeCount = 2;
  // 总共支出Count
  int64 ExpenditureCount = 3;
  // 总收入
  float Income = 4;
  // 总支出
  float Expenditure = 5;
  // 剩余
  float Balance = 6;
  // 开始记账的时间
  int64 StartTime = 7;


}



message TransactionGetReq {
  string UID = 1[(api.body)="uid"];
  int64 Start = 2[(api.body)="start"];
  int64 Count = 3[(api.body)="count"];

  // 在TimeRange非自定义时，此处不生效
  int64 StartTime = 4 [(api.body) = "start_time"];
  int64 EndTime = 5 [(api.body) = "end_time"];

  // 今天,昨天,这周,上周,这个月,上个月,自定义
  string TimeRange = 6 [(api.body) = "time_range"];

  // where的判断表达式
  string Condition = 7 [(api.body) = "condition"];

  // order表达式
  string Order = 8 [(api.body) = "order"];

}

message TransactionResp {
  repeated Transaction Transactions = 1;
}







service MoneyService{
  rpc TransactionPut(TransactionReq) returns(TransactionResp) {
    option (api.put) = "api/money";
  }
  rpc TransactionContent(TransactionContentReq) returns(TransactionResp) {
    option (api.post) = "api/money/content";
  }

  rpc TransactionGet(TransactionGetReq) returns(TransactionResp) {
    option (api.post) = "api/money";
  }
  rpc TransactionDelete(TransactionReq) returns(TransactionResp) {
    option (api.delete) = "api/money";
  }
  rpc TransactionGetView(TransactionGetReq) returns(TransactionView) {
    option (api.post) = "api/money/view";
  }
  rpc TransactionGetPersonalView(TransactionGetReq) returns(TransactionPersonalView){
    option (api.post) = "api/money/personal";
  }


}
