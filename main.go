// Code generated by hertz generator.

package main

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/jhue/misgo/biz"
	"github.com/jhue/misgo/biz/middleware"
	"github.com/jhue/misgo/internal/conf"
	"github.com/jhue/misgo/internal/mislog"
	"github.com/jhue/misgo/internal/util/size"
	"github.com/jhue/misgo/pkg/monitor"
)

func main() {

	m := newMonitor()
	err := m.Start()
	if err != nil {
		panic(err)
	}
	defer m.Stop()

	config := conf.GetConfig()

	f, err := mislog.LogFileIO(config.LogPath, config.Version)
	if err != nil {
		panic(err)
	}
	defer f.Close()
	mislog.InitLogger(f, config.LogConfig)
	mislog.DefaultLogger.Infof("misgo version: %s", config.Version)
	h := server.Default(
		server.WithHostPorts(fmt.Sprintf("%s:%d", config.Host, config.Port)),
		server.WithMaxRequestBodySize(15*size.MiB),
	)
	h.LoadHTMLGlob("templates/*")
	h.Static("/static", "./")
	h.NoRoute(func(c context.Context, ctx *app.RequestContext) {
		ctx.HTML(200, "404.html", nil)
	})
	h.Use(
		middleware.PprofMiddleware(),
		middleware.UIDExtractMiddleware(),
	)
	register(h)
	h.Spin()
}

func newMonitor() monitor.Monitor {
	updateFuncs := []monitor.UpdateFunc{
		func() (ok bool, msg string, err error) {
			before := conf.GetConfig()
			err = conf.InitConfig(Version)
			if err != nil {
				return
			}
			after := conf.GetConfig()
			if before != after {
				hlog.SetLevel(after.LogConfig.HLevel())
				return true, "config修改成功", nil
			} else {
				return
			}
		},
		func() (ok bool, msg string, err error) {
			before := biz.GetBizConfig()
			err = biz.InitBizConfig()
			if err != nil {
				return
			}
			after := biz.GetBizConfig()
			if !before.Equal(after) {
				return true, "bizConfig修改成功", nil
			} else {
				return
			}
		},
	}
	return monitor.NewMonitor(updateFuncs...)
}
