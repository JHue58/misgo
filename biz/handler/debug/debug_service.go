// Code generated by hertz generator.

package debug

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/jhue/misgo/biz"
	"github.com/jhue/misgo/biz/middleware"
	"github.com/jhue/misgo/biz/request"
	"github.com/jhue/misgo/internal/clock"
	"github.com/jhue/misgo/internal/conf"
	"github.com/jhue/misgo/internal/mislog"
	"github.com/jhue/misgo/pkg/formater"
)

// Debug .
// @router api/debug [GET]
func Debug(ctx context.Context, c *app.RequestContext) {
	bizCtx := request.NewBizContext(c)
	var err error

	var builder formater.Builder

	builder.WriteStringItem("服务器Clock", fmt.Sprintf("服务器已运行 %s ", clock.BootSince().String()))

	sysConfig := conf.GetConfig()
	bizConfig := biz.GetBizConfig()

	// 格式化 sysConfig 为带缩进的 JSON 文本
	sysConfigJSON, err := json.MarshalIndent(sysConfig, "", "    ")
	if err != nil {
		bizCtx.ServerError(err)
	}

	// 格式化 bizConfig 为带缩进的 JSON 文本
	bizConfigJSON, err := json.MarshalIndent(bizConfig, "", "    ")
	if err != nil {
		bizCtx.ServerError(err)
	}

	builder.WriteBytesItem("SysConfig", sysConfigJSON)
	builder.WriteBytesItem("BizConfig", bizConfigJSON)

	var pprofString string
	v := ctx.Value(middleware.PprofKey{})
	p, ok := v.(*middleware.Pprof)
	if ok {
		pprofString = p.Report()

	}

	if pprofString == "" {
		pprofString = "无法获取Pprof信息"
	}

	builder.WriteStringItem("性能分析", pprofString)

	err = mislog.DefaultLogger.Snapshot(builder.ItemWriter(fmt.Sprintf("日志信息(后%d行)", sysConfig.SnapshotLineCount)))
	if err != nil {
		bizCtx.ServerError(err)
		return
	}

	bizCtx.Text(builder.String())
}
