// Code generated by hertz generator.

package record

import (
	"context"
	"github.com/jhue/misgo/biz"
	"github.com/jhue/misgo/biz/model/base"
	"github.com/jhue/misgo/biz/request"
	"github.com/jhue/misgo/db"
	recordM "github.com/jhue/misgo/db/model/record"
	"github.com/jhue/misgo/db/model/user"
	"github.com/jhue/misgo/internal/mislog"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/jhue/misgo/biz/model/record"
)

// Record .
// @router /record [PUT]
func Record(ctx context.Context, c *app.RequestContext) {
	biz := request.NewBizContext(c)
	var err error
	var req record.RecordReq
	err = c.BindAndValidate(&req)
	if err != nil {
		biz.ParmaError(err)
		return
	}
	u, ok := user.ExtractUser(ctx)
	if !ok {
		biz.ParmaError(base.UIDError)
		return
	}
	if req.Tag == "" || req.Content == "" {
		biz.ParmaError(record.TagContentEmptyError)
		return
	}

	d := db.Get()
	res := d.Create(&recordM.Record{
		UserID:  u.ID,
		Tag:     req.Tag,
		Content: req.Content,
		Extend:  req.Extend,
		Time:    time.Now(),
	})

	if res.Error != nil {
		biz.DBError(res.Error)
		return
	}
	biz.Success()
	mislog.DefaultLogger.Infof("Record Success [Name] %s [Tag] %s [Content] %s\n", u.Name, req.Tag, req.Content)
}

// RecordGet .
// @router api/record [POST]
func RecordGet(ctx context.Context, c *app.RequestContext) {
	bizCtx := request.NewBizContext(c)
	var err error
	var req record.RecordGetReq
	err = c.BindAndValidate(&req)
	if err != nil {
		bizCtx.ParmaError(err)
		return
	}

	u, ok := user.ExtractUser(ctx)
	if !ok {
		bizCtx.ParmaError(base.UIDError)
		return
	}
	config := biz.GetBizConfig().RecordConfig
	length := req.Count
	if length > config.MaxGetCount {
		length = config.MaxGetCount
	}

	b := make([]recordM.Record, 0, length)
	d := db.Get()
	res := d.Where("user_id = ? AND tag LIKE ?", u.ID, "%"+req.Tag+"%").
		Order("time desc").
		Offset(int(req.Start)).
		Limit(int(length)).
		Find(&b)
	if res.Error != nil {
		bizCtx.DBError(res.Error)
		return
	}

	resp := record.RecordGetResp{Records: make([]*record.Record, 0)}
	for _, v := range b {
		resp.Records = append(resp.Records, &record.Record{
			Tag:     v.Tag,
			Content: v.Content,
			Extend:  v.Extend,
			Time:    v.Time.Unix(),
		})
	}
	bizCtx.Response(&resp)

	mislog.DefaultLogger.Infof("RecordGet Success [Name] %s [Tag] %s [Returns] %d\n", u.Name, req.Tag, len(resp.Records))
}
