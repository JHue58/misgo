// Code generated by hertz generator.

package clipboard

import (
	"context"
	"github.com/jhue/misgo/biz/request"
	"github.com/jhue/misgo/db"
	"github.com/jhue/misgo/db/model/user"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "github.com/jhue/misgo/biz/model/base"
	clipboard "github.com/jhue/misgo/biz/model/clipboard"
	clipboardM "github.com/jhue/misgo/db/model/clipboard"
)

// ClipBoardGet .
// @router api/clipboard [GET]
func ClipBoardGet(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.Empty
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	u, ok := user.ExtractUser(ctx)
	if !ok {
		request.ErrorRequest(c, request.ParmaError, "uid不正确或不存在")
		return
	}
	d := db.Get()
	b := make([]clipboardM.ClipBoard, 10)
	res := d.Where("uid = ?", u.UID).Order("time desc").Limit(10).Find(&b)
	if res.Error != nil {
		request.ErrorRequest(c, request.DataBaseError, res.Error.Error())
		return
	}

	mp := make(map[int64]string)
	for i := 0; i < len(b); i++ {
		mp[int64(i+1)] = b[i].Content
	}
	resp := clipboard.ClipResp{Message: "ok", Board: mp}

	c.JSON(consts.StatusOK, &resp)
}

// ClipBoardPut .
// @router api/clipboard [PUT]
func ClipBoardPut(ctx context.Context, c *app.RequestContext) {
	var err error
	var req clipboard.ClipReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(clipboard.ClipResp)

	c.JSON(consts.StatusOK, resp)
}
