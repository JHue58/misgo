// Code generated by hertz generator.

package clipboard

import (
	"context"
	"github.com/jhue/misgo/biz"
	"github.com/jhue/misgo/biz/model/base"
	"github.com/jhue/misgo/biz/request"
	"github.com/jhue/misgo/db"
	clipboardM "github.com/jhue/misgo/db/model/clipboard"
	"github.com/jhue/misgo/db/model/user"
	"github.com/jhue/misgo/internal/mislog"
	"gorm.io/gorm"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	clipboard "github.com/jhue/misgo/biz/model/clipboard"
)

// ClipBoardGet .
// @router api/clipboard [POST]
func ClipBoardGet(ctx context.Context, c *app.RequestContext) {
	bizCtx := request.NewBizContext(c)
	var err error
	var req clipboard.ClipGetReq
	err = c.BindAndValidate(&req)
	if err != nil {
		bizCtx.ParmaError(err)
		return
	}
	u, ok := user.ExtractUser(ctx)
	if !ok {
		bizCtx.ParmaError(base.UIDError)
		return
	}
	var length int64
	maxRecords := biz.GetBizConfig().MaxStore
	d := db.Get()
	if req.Count > maxRecords {
		length = maxRecords
	} else {
		length = req.Count
	}
	b := make([]clipboardM.ClipBoard, 0, length)

	res := d.Where("user_id = ?", u.ID).Order("time desc").Offset(int(req.Start)).Limit(int(req.Count)).Find(&b)
	if res.Error != nil {
		bizCtx.DBError(res.Error)
		return
	}

	resp := clipboard.ClipResp{Message: "ok", Board: make([]string, 0)}
	for _, v := range b {
		resp.Board = append(resp.Board, v.Content)
	}
	mislog.DefaultLogger.Infof("ClipBoardGet Success [Name] %s [Return Len] %d\n", u.Name, len(resp.Board))

	bizCtx.Response(&resp)

}

// ClipBoardPut .
// @router api/clipboard [PUT]
func ClipBoardPut(ctx context.Context, c *app.RequestContext) {
	bizCtx := request.NewBizContext(c)
	var err error
	var req clipboard.ClipReq
	err = c.BindAndValidate(&req)
	if err != nil {
		bizCtx.ParmaError(err)
		return
	}
	u, ok := user.ExtractUser(ctx)
	if !ok {
		bizCtx.ParmaError(base.UIDError)
		return
	}
	if len(req.Content) <= 0 {
		bizCtx.ParmaError(clipboard.ContentEmptyError)
		return
	}

	d := db.Get()
	var deleteCount int
	var boardCount int
	maxRecords := biz.GetBizConfig().MaxStore
	err = d.Transaction(func(tx *gorm.DB) error {

		newEntry := clipboardM.ClipBoard{
			UserID:  u.ID,
			Content: req.Content,
			Time:    time.Now(),
		}
		// 插入新记录
		if err := tx.Create(&newEntry).Error; err != nil {
			return err
		}

		// 获取当前用户的记录数量
		var count int64
		if err := tx.Model(&newEntry).Where("user_id = ?", u.ID).Count(&count).Error; err != nil {
			return err
		}

		// 如果记录数超过最大值，删除最旧的记录
		if count > maxRecords {
			var recordsToDelete []clipboardM.ClipBoard
			// 查询需要删除的记录
			if err := tx.Where("user_id = ?", u.ID).
				Order("time ASC").
				Limit(int(count - maxRecords)).
				Find(&recordsToDelete).Error; err != nil {
				return err
			}

			// 删除记录
			for _, record := range recordsToDelete {
				if err := tx.Delete(&record).Error; err != nil {
					return err
				}
				deleteCount++
			}

		}
		boardCount = int(count) - deleteCount
		return nil

	})
	if err != nil {
		bizCtx.DBError(err)
	}
	mislog.DefaultLogger.Infof("ClipBoardPut Success [Name] %s [BoardCount] %d [DeleteCount] %d\n", u.Name, boardCount, deleteCount)
	bizCtx.Success()
}
